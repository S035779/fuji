<?php
namespace Fuji\Item;

/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Item {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'Rank',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'ASIN',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'Title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'Release',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'ItemUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'ImageUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'ListPrice',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    8 => array(
      'var' => 'LowestNewPrice',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    9 => array(
      'var' => 'LowestUsedPrice',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    10 => array(
      'var' => 'OfferPrice',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    );

  /**
   * @var int
   */
  public $Rank = null;
  /**
   * @var string
   */
  public $ASIN = null;
  /**
   * @var string
   */
  public $Title = null;
  /**
   * @var string
   */
  public $Release = null;
  /**
   * @var string
   */
  public $ItemUrl = null;
  /**
   * @var string
   */
  public $ImageUrl = null;
  /**
   * @var int
   */
  public $ListPrice = null;
  /**
   * @var int
   */
  public $LowestNewPrice = null;
  /**
   * @var int
   */
  public $LowestUsedPrice = null;
  /**
   * @var int
   */
  public $OfferPrice = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Rank'])) {
        $this->Rank = $vals['Rank'];
      }
      if (isset($vals['ASIN'])) {
        $this->ASIN = $vals['ASIN'];
      }
      if (isset($vals['Title'])) {
        $this->Title = $vals['Title'];
      }
      if (isset($vals['Release'])) {
        $this->Release = $vals['Release'];
      }
      if (isset($vals['ItemUrl'])) {
        $this->ItemUrl = $vals['ItemUrl'];
      }
      if (isset($vals['ImageUrl'])) {
        $this->ImageUrl = $vals['ImageUrl'];
      }
      if (isset($vals['ListPrice'])) {
        $this->ListPrice = $vals['ListPrice'];
      }
      if (isset($vals['LowestNewPrice'])) {
        $this->LowestNewPrice = $vals['LowestNewPrice'];
      }
      if (isset($vals['LowestUsedPrice'])) {
        $this->LowestUsedPrice = $vals['LowestUsedPrice'];
      }
      if (isset($vals['OfferPrice'])) {
        $this->OfferPrice = $vals['OfferPrice'];
      }
    }
  }

  public function getName() {
    return 'Item';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->Rank);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ASIN);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Release);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ItemUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ImageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ListPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->LowestNewPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->LowestUsedPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->OfferPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Item');
    if ($this->Rank !== null) {
      $xfer += $output->writeFieldBegin('Rank', TType::I64, 1);
      $xfer += $output->writeI64($this->Rank);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ASIN !== null) {
      $xfer += $output->writeFieldBegin('ASIN', TType::STRING, 2);
      $xfer += $output->writeString($this->ASIN);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Title !== null) {
      $xfer += $output->writeFieldBegin('Title', TType::STRING, 3);
      $xfer += $output->writeString($this->Title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Release !== null) {
      $xfer += $output->writeFieldBegin('Release', TType::STRING, 4);
      $xfer += $output->writeString($this->Release);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ItemUrl !== null) {
      $xfer += $output->writeFieldBegin('ItemUrl', TType::STRING, 5);
      $xfer += $output->writeString($this->ItemUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ImageUrl !== null) {
      $xfer += $output->writeFieldBegin('ImageUrl', TType::STRING, 6);
      $xfer += $output->writeString($this->ImageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ListPrice !== null) {
      $xfer += $output->writeFieldBegin('ListPrice', TType::I64, 7);
      $xfer += $output->writeI64($this->ListPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LowestNewPrice !== null) {
      $xfer += $output->writeFieldBegin('LowestNewPrice', TType::I64, 8);
      $xfer += $output->writeI64($this->LowestNewPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LowestUsedPrice !== null) {
      $xfer += $output->writeFieldBegin('LowestUsedPrice', TType::I64, 9);
      $xfer += $output->writeI64($this->LowestUsedPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OfferPrice !== null) {
      $xfer += $output->writeFieldBegin('OfferPrice', TType::I64, 10);
      $xfer += $output->writeI64($this->OfferPrice);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tops {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'ASIN',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'Title',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'ItemUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'Category',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $ASIN = null;
  /**
   * @var string
   */
  public $Title = null;
  /**
   * @var string
   */
  public $ItemUrl = null;
  /**
   * @var string
   */
  public $Category = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['ASIN'])) {
        $this->ASIN = $vals['ASIN'];
      }
      if (isset($vals['Title'])) {
        $this->Title = $vals['Title'];
      }
      if (isset($vals['ItemUrl'])) {
        $this->ItemUrl = $vals['ItemUrl'];
      }
      if (isset($vals['Category'])) {
        $this->Category = $vals['Category'];
      }
    }
  }

  public function getName() {
    return 'Tops';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ASIN);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ItemUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tops');
    if ($this->ASIN !== null) {
      $xfer += $output->writeFieldBegin('ASIN', TType::STRING, 1);
      $xfer += $output->writeString($this->ASIN);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Title !== null) {
      $xfer += $output->writeFieldBegin('Title', TType::STRING, 2);
      $xfer += $output->writeString($this->Title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ItemUrl !== null) {
      $xfer += $output->writeFieldBegin('ItemUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->ItemUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Category !== null) {
      $xfer += $output->writeFieldBegin('Category', TType::STRING, 4);
      $xfer += $output->writeString($this->Category);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Node {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'BrowseNode',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'Name',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $BrowseNode = null;
  /**
   * @var string
   */
  public $Name = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['BrowseNode'])) {
        $this->BrowseNode = $vals['BrowseNode'];
      }
      if (isset($vals['Name'])) {
        $this->Name = $vals['Name'];
      }
    }
  }

  public function getName() {
    return 'Node';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->BrowseNode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Node');
    if ($this->BrowseNode !== null) {
      $xfer += $output->writeFieldBegin('BrowseNode', TType::I64, 1);
      $xfer += $output->writeI64($this->BrowseNode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Name !== null) {
      $xfer += $output->writeFieldBegin('Name', TType::STRING, 2);
      $xfer += $output->writeString($this->Name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


