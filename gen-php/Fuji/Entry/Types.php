<?php
namespace Fuji\Entry;

/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class EntryType {
  const TEXT = 1;
  const PHOTO = 2;
  static public $__names = array(
    1 => 'TEXT',
    2 => 'PHOTO',
  );
}

class Entry {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'title',
      'isRequired' => false,
      'type' => TType::STRUCT,
      'class' => '\Fuji\Item\Item',
      ),
    3 => array(
      'var' => 'entryType',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'text',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'photoUrl',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var \Fuji\Item\Item
   */
  public $title = null;
  /**
   * @var int
   */
  public $entryType = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var string
   */
  public $photoUrl = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['entryType'])) {
        $this->entryType = $vals['entryType'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['photoUrl'])) {
        $this->photoUrl = $vals['photoUrl'];
      }
    }
  }

  public function getName() {
    return 'Entry';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->title = new \Fuji\Item\Item();
            $xfer += $this->title->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->entryType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photoUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Entry');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      if (!is_object($this->title)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('title', TType::STRUCT, 2);
      $xfer += $this->title->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->entryType !== null) {
      $xfer += $output->writeFieldBegin('entryType', TType::I32, 3);
      $xfer += $output->writeI32($this->entryType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 4);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photoUrl !== null) {
      $xfer += $output->writeFieldBegin('photoUrl', TType::STRING, 5);
      $xfer += $output->writeString($this->photoUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvalidLanguageException extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    );


  public function __construct() {
  }

  public function getName() {
    return 'InvalidLanguageException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidLanguageException');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


