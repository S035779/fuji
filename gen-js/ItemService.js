//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Fuji.Item.ItemService_ping_args = function(args) {
};
Fuji.Item.ItemService_ping_args.prototype = {};
Fuji.Item.ItemService_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_ping_args.prototype.write = function(output) {
  output.writeStructBegin('ItemService_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_ping_result = function(args) {
};
Fuji.Item.ItemService_ping_result.prototype = {};
Fuji.Item.ItemService_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_ping_result.prototype.write = function(output) {
  output.writeStructBegin('ItemService_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_zip_args = function(args) {
};
Fuji.Item.ItemService_zip_args.prototype = {};
Fuji.Item.ItemService_zip_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_zip_args.prototype.write = function(output) {
  output.writeStructBegin('ItemService_zip_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_zip_result = function(args) {
};
Fuji.Item.ItemService_zip_result.prototype = {};
Fuji.Item.ItemService_zip_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_zip_result.prototype.write = function(output) {
  output.writeStructBegin('ItemService_zip_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_add_args = function(args) {
  this.num1 = null;
  this.num2 = null;
  if (args) {
    if (args.num1 !== undefined && args.num1 !== null) {
      this.num1 = args.num1;
    }
    if (args.num2 !== undefined && args.num2 !== null) {
      this.num2 = args.num2;
    }
  }
};
Fuji.Item.ItemService_add_args.prototype = {};
Fuji.Item.ItemService_add_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.num1 = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.num2 = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_add_args.prototype.write = function(output) {
  output.writeStructBegin('ItemService_add_args');
  if (this.num1 !== null && this.num1 !== undefined) {
    output.writeFieldBegin('num1', Thrift.Type.I64, 1);
    output.writeI64(this.num1);
    output.writeFieldEnd();
  }
  if (this.num2 !== null && this.num2 !== undefined) {
    output.writeFieldBegin('num2', Thrift.Type.I64, 2);
    output.writeI64(this.num2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_add_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Fuji.Item.ItemService_add_result.prototype = {};
Fuji.Item.ItemService_add_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_add_result.prototype.write = function(output) {
  output.writeStructBegin('ItemService_add_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_findById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Fuji.Item.ItemService_findById_args.prototype = {};
Fuji.Item.ItemService_findById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_findById_args.prototype.write = function(output) {
  output.writeStructBegin('ItemService_findById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_findById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Fuji.Item.Item(args.success);
    }
  }
};
Fuji.Item.ItemService_findById_result.prototype = {};
Fuji.Item.ItemService_findById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Fuji.Item.Item();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_findById_result.prototype.write = function(output) {
  output.writeStructBegin('ItemService_findById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_findByIds_args = function(args) {
  this.ids = null;
  this.opt = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
    if (args.opt !== undefined && args.opt !== null) {
      this.opt = new Fuji.Item.ItemOption(args.opt);
    }
  }
};
Fuji.Item.ItemService_findByIds_args.prototype = {};
Fuji.Item.ItemService_findByIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.ids = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI64().value;
          this.ids.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.opt = new Fuji.Item.ItemOption();
        this.opt.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_findByIds_args.prototype.write = function(output) {
  output.writeStructBegin('ItemService_findByIds_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.ids.length);
    for (var iter7 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter7))
      {
        iter7 = this.ids[iter7];
        output.writeI64(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.opt !== null && this.opt !== undefined) {
    output.writeFieldBegin('opt', Thrift.Type.STRUCT, 2);
    this.opt.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_findByIds_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Fuji.Item.Item]);
    }
  }
};
Fuji.Item.ItemService_findByIds_result.prototype = {};
Fuji.Item.ItemService_findByIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Fuji.Item.Item();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_findByIds_result.prototype.write = function(output) {
  output.writeStructBegin('ItemService_findByIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Fuji.Item.ItemServiceClient.prototype = {};
Fuji.Item.ItemServiceClient.prototype.ping = function(callback) {
  if (callback === undefined) {
    this.send_ping();
    this.recv_ping();
  } else {
    var postData = this.send_ping(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_ping);
  }
};

Fuji.Item.ItemServiceClient.prototype.send_ping = function(callback) {
  this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new Fuji.Item.ItemService_ping_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Fuji.Item.ItemServiceClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Fuji.Item.ItemService_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
Fuji.Item.ItemServiceClient.prototype.zip = function(callback) {
  if (callback === undefined) {
    this.send_zip();
  } else {
    var postData = this.send_zip(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_zip);
  }
};

Fuji.Item.ItemServiceClient.prototype.send_zip = function(callback) {
  this.output.writeMessageBegin('zip', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new Fuji.Item.ItemService_zip_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};
Fuji.Item.ItemServiceClient.prototype.add = function(num1, num2, callback) {
  if (callback === undefined) {
    this.send_add(num1, num2);
    return this.recv_add();
  } else {
    var postData = this.send_add(num1, num2, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_add);
  }
};

Fuji.Item.ItemServiceClient.prototype.send_add = function(num1, num2, callback) {
  this.output.writeMessageBegin('add', Thrift.MessageType.CALL, this.seqid);
  var args = new Fuji.Item.ItemService_add_args();
  args.num1 = num1;
  args.num2 = num2;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Fuji.Item.ItemServiceClient.prototype.recv_add = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Fuji.Item.ItemService_add_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'add failed: unknown result';
};
Fuji.Item.ItemServiceClient.prototype.findById = function(id, callback) {
  if (callback === undefined) {
    this.send_findById(id);
    return this.recv_findById();
  } else {
    var postData = this.send_findById(id, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_findById);
  }
};

Fuji.Item.ItemServiceClient.prototype.send_findById = function(id, callback) {
  this.output.writeMessageBegin('findById', Thrift.MessageType.CALL, this.seqid);
  var args = new Fuji.Item.ItemService_findById_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Fuji.Item.ItemServiceClient.prototype.recv_findById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Fuji.Item.ItemService_findById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findById failed: unknown result';
};
Fuji.Item.ItemServiceClient.prototype.findByIds = function(ids, opt, callback) {
  if (callback === undefined) {
    this.send_findByIds(ids, opt);
    return this.recv_findByIds();
  } else {
    var postData = this.send_findByIds(ids, opt, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_findByIds);
  }
};

Fuji.Item.ItemServiceClient.prototype.send_findByIds = function(ids, opt, callback) {
  this.output.writeMessageBegin('findByIds', Thrift.MessageType.CALL, this.seqid);
  var args = new Fuji.Item.ItemService_findByIds_args();
  args.ids = ids;
  args.opt = opt;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Fuji.Item.ItemServiceClient.prototype.recv_findByIds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Fuji.Item.ItemService_findByIds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findByIds failed: unknown result';
};
