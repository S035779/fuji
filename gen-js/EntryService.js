//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Fuji.Entry.EntryService_findByItemDetails_args = function(args) {
  this.language = null;
  this.page = null;
  this.perPage = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.page !== undefined && args.page !== null) {
      this.page = args.page;
    }
    if (args.perPage !== undefined && args.perPage !== null) {
      this.perPage = args.perPage;
    }
  }
};
Fuji.Entry.EntryService_findByItemDetails_args.prototype = {};
Fuji.Entry.EntryService_findByItemDetails_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.page = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.perPage = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Entry.EntryService_findByItemDetails_args.prototype.write = function(output) {
  output.writeStructBegin('EntryService_findByItemDetails_args');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 1);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I64, 2);
    output.writeI64(this.page);
    output.writeFieldEnd();
  }
  if (this.perPage !== null && this.perPage !== undefined) {
    output.writeFieldBegin('perPage', Thrift.Type.I64, 3);
    output.writeI64(this.perPage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Entry.EntryService_findByItemDetails_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof Fuji.Entry.InvalidLanguageException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Fuji.Entry.Entry]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Fuji.Entry.EntryService_findByItemDetails_result.prototype = {};
Fuji.Entry.EntryService_findByItemDetails_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Fuji.Entry.Entry();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new Fuji.Entry.InvalidLanguageException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Entry.EntryService_findByItemDetails_result.prototype.write = function(output) {
  output.writeStructBegin('EntryService_findByItemDetails_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Entry.EntryServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Fuji.Entry.EntryServiceClient.prototype = {};
Fuji.Entry.EntryServiceClient.prototype.findByItemDetails = function(language, page, perPage, callback) {
  if (callback === undefined) {
    this.send_findByItemDetails(language, page, perPage);
    return this.recv_findByItemDetails();
  } else {
    var postData = this.send_findByItemDetails(language, page, perPage, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_findByItemDetails);
  }
};

Fuji.Entry.EntryServiceClient.prototype.send_findByItemDetails = function(language, page, perPage, callback) {
  this.output.writeMessageBegin('findByItemDetails', Thrift.MessageType.CALL, this.seqid);
  var args = new Fuji.Entry.EntryService_findByItemDetails_args();
  args.language = language;
  args.page = page;
  args.perPage = perPage;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

Fuji.Entry.EntryServiceClient.prototype.recv_findByItemDetails = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Fuji.Entry.EntryService_findByItemDetails_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'findByItemDetails failed: unknown result';
};
