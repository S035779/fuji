//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof Fuji === 'undefined') {
  Fuji = {};
}
if (typeof Fuji.Entry === 'undefined') {
  Fuji.Entry = {};
}
Fuji.Entry.EntryType = {
  'TEXT' : 1,
  'PHOTO' : 2
};
Fuji.Entry.Entry = function(args) {
  this.id = null;
  this.title = null;
  this.entryType = null;
  this.text = null;
  this.photoUrl = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = new Fuji.Item.Item(args.title);
    }
    if (args.entryType !== undefined && args.entryType !== null) {
      this.entryType = args.entryType;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.photoUrl !== undefined && args.photoUrl !== null) {
      this.photoUrl = args.photoUrl;
    }
  }
};
Fuji.Entry.Entry.prototype = {};
Fuji.Entry.Entry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.title = new Fuji.Item.Item();
        this.title.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.entryType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.photoUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Entry.Entry.prototype.write = function(output) {
  output.writeStructBegin('Entry');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRUCT, 2);
    this.title.write(output);
    output.writeFieldEnd();
  }
  if (this.entryType !== null && this.entryType !== undefined) {
    output.writeFieldBegin('entryType', Thrift.Type.I32, 3);
    output.writeI32(this.entryType);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 4);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.photoUrl !== null && this.photoUrl !== undefined) {
    output.writeFieldBegin('photoUrl', Thrift.Type.STRING, 5);
    output.writeString(this.photoUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Entry.InvalidLanguageException = function(args) {
};
Thrift.inherits(Fuji.Entry.InvalidLanguageException, Thrift.TException);
Fuji.Entry.InvalidLanguageException.prototype.name = 'InvalidLanguageException';
Fuji.Entry.InvalidLanguageException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Entry.InvalidLanguageException.prototype.write = function(output) {
  output.writeStructBegin('InvalidLanguageException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

