//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof Fuji === 'undefined') {
  Fuji = {};
}
if (typeof Fuji.Item === 'undefined') {
  Fuji.Item = {};
}
Fuji.Item.Item = function(args) {
  this.id = null;
  this.name = null;
  this.language = null;
  this.iconUrl = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.iconUrl !== undefined && args.iconUrl !== null) {
      this.iconUrl = args.iconUrl;
    }
  }
};
Fuji.Item.Item.prototype = {};
Fuji.Item.Item.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.iconUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.Item.prototype.write = function(output) {
  output.writeStructBegin('Item');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.iconUrl !== null && this.iconUrl !== undefined) {
    output.writeFieldBegin('iconUrl', Thrift.Type.STRING, 4);
    output.writeString(this.iconUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemOption = function(args) {
  this.withLanguage = false;
  this.withIcon = false;
  if (args) {
    if (args.withLanguage !== undefined && args.withLanguage !== null) {
      this.withLanguage = args.withLanguage;
    }
    if (args.withIcon !== undefined && args.withIcon !== null) {
      this.withIcon = args.withIcon;
    }
  }
};
Fuji.Item.ItemOption.prototype = {};
Fuji.Item.ItemOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.withLanguage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.withIcon = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemOption.prototype.write = function(output) {
  output.writeStructBegin('ItemOption');
  if (this.withLanguage !== null && this.withLanguage !== undefined) {
    output.writeFieldBegin('withLanguage', Thrift.Type.BOOL, 1);
    output.writeBool(this.withLanguage);
    output.writeFieldEnd();
  }
  if (this.withIcon !== null && this.withIcon !== undefined) {
    output.writeFieldBegin('withIcon', Thrift.Type.BOOL, 2);
    output.writeBool(this.withIcon);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.LANGUAGE_JA = 'JA';
Fuji.Item.LANGUAGE_EN = 'EN';
