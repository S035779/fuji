//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof Fuji === 'undefined') {
  Fuji = {};
}
if (typeof Fuji.Item === 'undefined') {
  Fuji.Item = {};
}
Fuji.Item.Item = function(args) {
  this.Rank = null;
  this.ASIN = null;
  this.Title = null;
  this.Release = null;
  this.ItemUrl = null;
  this.ImageUrl = null;
  this.ListPrice = null;
  this.LowestNewPrice = null;
  this.LowestUsedPrice = null;
  this.OfferPrice = null;
  if (args) {
    if (args.Rank !== undefined && args.Rank !== null) {
      this.Rank = args.Rank;
    }
    if (args.ASIN !== undefined && args.ASIN !== null) {
      this.ASIN = args.ASIN;
    }
    if (args.Title !== undefined && args.Title !== null) {
      this.Title = args.Title;
    }
    if (args.Release !== undefined && args.Release !== null) {
      this.Release = args.Release;
    }
    if (args.ItemUrl !== undefined && args.ItemUrl !== null) {
      this.ItemUrl = args.ItemUrl;
    }
    if (args.ImageUrl !== undefined && args.ImageUrl !== null) {
      this.ImageUrl = args.ImageUrl;
    }
    if (args.ListPrice !== undefined && args.ListPrice !== null) {
      this.ListPrice = args.ListPrice;
    }
    if (args.LowestNewPrice !== undefined && args.LowestNewPrice !== null) {
      this.LowestNewPrice = args.LowestNewPrice;
    }
    if (args.LowestUsedPrice !== undefined && args.LowestUsedPrice !== null) {
      this.LowestUsedPrice = args.LowestUsedPrice;
    }
    if (args.OfferPrice !== undefined && args.OfferPrice !== null) {
      this.OfferPrice = args.OfferPrice;
    }
  }
};
Fuji.Item.Item.prototype = {};
Fuji.Item.Item.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.Rank = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ASIN = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.Release = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ItemUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.ImageUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.ListPrice = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.LowestNewPrice = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.LowestUsedPrice = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.OfferPrice = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.Item.prototype.write = function(output) {
  output.writeStructBegin('Item');
  if (this.Rank !== null && this.Rank !== undefined) {
    output.writeFieldBegin('Rank', Thrift.Type.I64, 1);
    output.writeI64(this.Rank);
    output.writeFieldEnd();
  }
  if (this.ASIN !== null && this.ASIN !== undefined) {
    output.writeFieldBegin('ASIN', Thrift.Type.STRING, 2);
    output.writeString(this.ASIN);
    output.writeFieldEnd();
  }
  if (this.Title !== null && this.Title !== undefined) {
    output.writeFieldBegin('Title', Thrift.Type.STRING, 3);
    output.writeString(this.Title);
    output.writeFieldEnd();
  }
  if (this.Release !== null && this.Release !== undefined) {
    output.writeFieldBegin('Release', Thrift.Type.STRING, 4);
    output.writeString(this.Release);
    output.writeFieldEnd();
  }
  if (this.ItemUrl !== null && this.ItemUrl !== undefined) {
    output.writeFieldBegin('ItemUrl', Thrift.Type.STRING, 5);
    output.writeString(this.ItemUrl);
    output.writeFieldEnd();
  }
  if (this.ImageUrl !== null && this.ImageUrl !== undefined) {
    output.writeFieldBegin('ImageUrl', Thrift.Type.STRING, 6);
    output.writeString(this.ImageUrl);
    output.writeFieldEnd();
  }
  if (this.ListPrice !== null && this.ListPrice !== undefined) {
    output.writeFieldBegin('ListPrice', Thrift.Type.I64, 7);
    output.writeI64(this.ListPrice);
    output.writeFieldEnd();
  }
  if (this.LowestNewPrice !== null && this.LowestNewPrice !== undefined) {
    output.writeFieldBegin('LowestNewPrice', Thrift.Type.I64, 8);
    output.writeI64(this.LowestNewPrice);
    output.writeFieldEnd();
  }
  if (this.LowestUsedPrice !== null && this.LowestUsedPrice !== undefined) {
    output.writeFieldBegin('LowestUsedPrice', Thrift.Type.I64, 9);
    output.writeI64(this.LowestUsedPrice);
    output.writeFieldEnd();
  }
  if (this.OfferPrice !== null && this.OfferPrice !== undefined) {
    output.writeFieldBegin('OfferPrice', Thrift.Type.I64, 10);
    output.writeI64(this.OfferPrice);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.Tops = function(args) {
  this.ASIN = null;
  this.Title = null;
  this.ItemUrl = null;
  this.Category = null;
  if (args) {
    if (args.ASIN !== undefined && args.ASIN !== null) {
      this.ASIN = args.ASIN;
    }
    if (args.Title !== undefined && args.Title !== null) {
      this.Title = args.Title;
    }
    if (args.ItemUrl !== undefined && args.ItemUrl !== null) {
      this.ItemUrl = args.ItemUrl;
    }
    if (args.Category !== undefined && args.Category !== null) {
      this.Category = args.Category;
    }
  }
};
Fuji.Item.Tops.prototype = {};
Fuji.Item.Tops.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ASIN = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ItemUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.Category = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.Tops.prototype.write = function(output) {
  output.writeStructBegin('Tops');
  if (this.ASIN !== null && this.ASIN !== undefined) {
    output.writeFieldBegin('ASIN', Thrift.Type.STRING, 1);
    output.writeString(this.ASIN);
    output.writeFieldEnd();
  }
  if (this.Title !== null && this.Title !== undefined) {
    output.writeFieldBegin('Title', Thrift.Type.STRING, 2);
    output.writeString(this.Title);
    output.writeFieldEnd();
  }
  if (this.ItemUrl !== null && this.ItemUrl !== undefined) {
    output.writeFieldBegin('ItemUrl', Thrift.Type.STRING, 3);
    output.writeString(this.ItemUrl);
    output.writeFieldEnd();
  }
  if (this.Category !== null && this.Category !== undefined) {
    output.writeFieldBegin('Category', Thrift.Type.STRING, 4);
    output.writeString(this.Category);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.Node = function(args) {
  this.BrowseNode = null;
  this.Name = null;
  if (args) {
    if (args.BrowseNode !== undefined && args.BrowseNode !== null) {
      this.BrowseNode = args.BrowseNode;
    }
    if (args.Name !== undefined && args.Name !== null) {
      this.Name = args.Name;
    }
  }
};
Fuji.Item.Node.prototype = {};
Fuji.Item.Node.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.BrowseNode = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.Node.prototype.write = function(output) {
  output.writeStructBegin('Node');
  if (this.BrowseNode !== null && this.BrowseNode !== undefined) {
    output.writeFieldBegin('BrowseNode', Thrift.Type.I64, 1);
    output.writeI64(this.BrowseNode);
    output.writeFieldEnd();
  }
  if (this.Name !== null && this.Name !== undefined) {
    output.writeFieldBegin('Name', Thrift.Type.STRING, 2);
    output.writeString(this.Name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof Fuji === 'undefined') {
  Fuji = {};
}
//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Fuji.Item.ItemService_NewReleases_args = function(args) {
  this.node_id = null;
  if (args) {
    if (args.node_id !== undefined && args.node_id !== null) {
      this.node_id = args.node_id;
    }
  }
};
Fuji.Item.ItemService_NewReleases_args.prototype = {};
Fuji.Item.ItemService_NewReleases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.node_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_NewReleases_args.prototype.write = function(output) {
  output.writeStructBegin('ItemService_NewReleases_args');
  if (this.node_id !== null && this.node_id !== undefined) {
    output.writeFieldBegin('node_id', Thrift.Type.I64, 1);
    output.writeI64(this.node_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_NewReleases_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Fuji.Item.Tops]);
    }
  }
};
Fuji.Item.ItemService_NewReleases_result.prototype = {};
Fuji.Item.ItemService_NewReleases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Fuji.Item.Tops();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_NewReleases_result.prototype.write = function(output) {
  output.writeStructBegin('ItemService_NewReleases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_BestSellers_args = function(args) {
  this.node_id = null;
  if (args) {
    if (args.node_id !== undefined && args.node_id !== null) {
      this.node_id = args.node_id;
    }
  }
};
Fuji.Item.ItemService_BestSellers_args.prototype = {};
Fuji.Item.ItemService_BestSellers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.node_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_BestSellers_args.prototype.write = function(output) {
  output.writeStructBegin('ItemService_BestSellers_args');
  if (this.node_id !== null && this.node_id !== undefined) {
    output.writeFieldBegin('node_id', Thrift.Type.I64, 1);
    output.writeI64(this.node_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_BestSellers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Fuji.Item.Tops]);
    }
  }
};
Fuji.Item.ItemService_BestSellers_result.prototype = {};
Fuji.Item.ItemService_BestSellers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Fuji.Item.Tops();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_BestSellers_result.prototype.write = function(output) {
  output.writeStructBegin('ItemService_BestSellers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_ReleaseDate_args = function(args) {
  this.node_id = null;
  this.category = null;
  this.page = null;
  if (args) {
    if (args.node_id !== undefined && args.node_id !== null) {
      this.node_id = args.node_id;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.page !== undefined && args.page !== null) {
      this.page = args.page;
    }
  }
};
Fuji.Item.ItemService_ReleaseDate_args.prototype = {};
Fuji.Item.ItemService_ReleaseDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.node_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.category = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.page = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_ReleaseDate_args.prototype.write = function(output) {
  output.writeStructBegin('ItemService_ReleaseDate_args');
  if (this.node_id !== null && this.node_id !== undefined) {
    output.writeFieldBegin('node_id', Thrift.Type.I64, 1);
    output.writeI64(this.node_id);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRING, 2);
    output.writeString(this.category);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I64, 3);
    output.writeI64(this.page);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_ReleaseDate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Fuji.Item.Item]);
    }
  }
};
Fuji.Item.ItemService_ReleaseDate_result.prototype = {};
Fuji.Item.ItemService_ReleaseDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new Fuji.Item.Item();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_ReleaseDate_result.prototype.write = function(output) {
  output.writeStructBegin('ItemService_ReleaseDate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_SalesRanking_args = function(args) {
  this.node_id = null;
  this.category = null;
  this.page = null;
  if (args) {
    if (args.node_id !== undefined && args.node_id !== null) {
      this.node_id = args.node_id;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.page !== undefined && args.page !== null) {
      this.page = args.page;
    }
  }
};
Fuji.Item.ItemService_SalesRanking_args.prototype = {};
Fuji.Item.ItemService_SalesRanking_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.node_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.category = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.page = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_SalesRanking_args.prototype.write = function(output) {
  output.writeStructBegin('ItemService_SalesRanking_args');
  if (this.node_id !== null && this.node_id !== undefined) {
    output.writeFieldBegin('node_id', Thrift.Type.I64, 1);
    output.writeI64(this.node_id);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRING, 2);
    output.writeString(this.category);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I64, 3);
    output.writeI64(this.page);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_SalesRanking_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Fuji.Item.Item]);
    }
  }
};
Fuji.Item.ItemService_SalesRanking_result.prototype = {};
Fuji.Item.ItemService_SalesRanking_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.success = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new Fuji.Item.Item();
          elem30.read(input);
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_SalesRanking_result.prototype.write = function(output) {
  output.writeStructBegin('ItemService_SalesRanking_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter31 in this.success)
    {
      if (this.success.hasOwnProperty(iter31))
      {
        iter31 = this.success[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_ItemLookup_args = function(args) {
  this.item_id = null;
  this.id_type = null;
  if (args) {
    if (args.item_id !== undefined && args.item_id !== null) {
      this.item_id = args.item_id;
    }
    if (args.id_type !== undefined && args.id_type !== null) {
      this.id_type = args.id_type;
    }
  }
};
Fuji.Item.ItemService_ItemLookup_args.prototype = {};
Fuji.Item.ItemService_ItemLookup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.item_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id_type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_ItemLookup_args.prototype.write = function(output) {
  output.writeStructBegin('ItemService_ItemLookup_args');
  if (this.item_id !== null && this.item_id !== undefined) {
    output.writeFieldBegin('item_id', Thrift.Type.STRING, 1);
    output.writeString(this.item_id);
    output.writeFieldEnd();
  }
  if (this.id_type !== null && this.id_type !== undefined) {
    output.writeFieldBegin('id_type', Thrift.Type.STRING, 2);
    output.writeString(this.id_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_ItemLookup_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Fuji.Item.Item]);
    }
  }
};
Fuji.Item.ItemService_ItemLookup_result.prototype = {};
Fuji.Item.ItemService_ItemLookup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Fuji.Item.Item();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_ItemLookup_result.prototype.write = function(output) {
  output.writeStructBegin('ItemService_ItemLookup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_ItemList_args = function(args) {
  this.keyword = null;
  this.page = null;
  if (args) {
    if (args.keyword !== undefined && args.keyword !== null) {
      this.keyword = args.keyword;
    }
    if (args.page !== undefined && args.page !== null) {
      this.page = args.page;
    }
  }
};
Fuji.Item.ItemService_ItemList_args.prototype = {};
Fuji.Item.ItemService_ItemList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keyword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.page = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_ItemList_args.prototype.write = function(output) {
  output.writeStructBegin('ItemService_ItemList_args');
  if (this.keyword !== null && this.keyword !== undefined) {
    output.writeFieldBegin('keyword', Thrift.Type.STRING, 1);
    output.writeString(this.keyword);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I64, 2);
    output.writeI64(this.page);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_ItemList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Fuji.Item.Item]);
    }
  }
};
Fuji.Item.ItemService_ItemList_result.prototype = {};
Fuji.Item.ItemService_ItemList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new Fuji.Item.Item();
          elem46.read(input);
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_ItemList_result.prototype.write = function(output) {
  output.writeStructBegin('ItemService_ItemList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_NodeList_args = function(args) {
  this.node_id = null;
  if (args) {
    if (args.node_id !== undefined && args.node_id !== null) {
      this.node_id = args.node_id;
    }
  }
};
Fuji.Item.ItemService_NodeList_args.prototype = {};
Fuji.Item.ItemService_NodeList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.node_id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_NodeList_args.prototype.write = function(output) {
  output.writeStructBegin('ItemService_NodeList_args');
  if (this.node_id !== null && this.node_id !== undefined) {
    output.writeFieldBegin('node_id', Thrift.Type.I64, 1);
    output.writeI64(this.node_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemService_NodeList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Fuji.Item.Node]);
    }
  }
};
Fuji.Item.ItemService_NodeList_result.prototype = {};
Fuji.Item.ItemService_NodeList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.success = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new Fuji.Item.Node();
          elem54.read(input);
          this.success.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fuji.Item.ItemService_NodeList_result.prototype.write = function(output) {
  output.writeStructBegin('ItemService_NodeList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter55 in this.success)
    {
      if (this.success.hasOwnProperty(iter55))
      {
        iter55 = this.success[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Fuji.Item.ItemServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Fuji.Item.ItemServiceClient.prototype = {};
Fuji.Item.ItemServiceClient.prototype.NewReleases = function(node_id, callback) {
  this.send_NewReleases(node_id, callback); 
  if (!callback) {
    return this.recv_NewReleases();
  }
};

Fuji.Item.ItemServiceClient.prototype.send_NewReleases = function(node_id, callback) {
  this.output.writeMessageBegin('NewReleases', Thrift.MessageType.CALL, this.seqid);
  var params = {
    node_id: node_id
  };
  var args = new Fuji.Item.ItemService_NewReleases_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_NewReleases();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

Fuji.Item.ItemServiceClient.prototype.recv_NewReleases = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Fuji.Item.ItemService_NewReleases_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'NewReleases failed: unknown result';
};
Fuji.Item.ItemServiceClient.prototype.BestSellers = function(node_id, callback) {
  this.send_BestSellers(node_id, callback); 
  if (!callback) {
    return this.recv_BestSellers();
  }
};

Fuji.Item.ItemServiceClient.prototype.send_BestSellers = function(node_id, callback) {
  this.output.writeMessageBegin('BestSellers', Thrift.MessageType.CALL, this.seqid);
  var params = {
    node_id: node_id
  };
  var args = new Fuji.Item.ItemService_BestSellers_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_BestSellers();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

Fuji.Item.ItemServiceClient.prototype.recv_BestSellers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Fuji.Item.ItemService_BestSellers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'BestSellers failed: unknown result';
};
Fuji.Item.ItemServiceClient.prototype.ReleaseDate = function(node_id, category, page, callback) {
  this.send_ReleaseDate(node_id, category, page, callback); 
  if (!callback) {
    return this.recv_ReleaseDate();
  }
};

Fuji.Item.ItemServiceClient.prototype.send_ReleaseDate = function(node_id, category, page, callback) {
  this.output.writeMessageBegin('ReleaseDate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    node_id: node_id,
    category: category,
    page: page
  };
  var args = new Fuji.Item.ItemService_ReleaseDate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_ReleaseDate();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

Fuji.Item.ItemServiceClient.prototype.recv_ReleaseDate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Fuji.Item.ItemService_ReleaseDate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ReleaseDate failed: unknown result';
};
Fuji.Item.ItemServiceClient.prototype.SalesRanking = function(node_id, category, page, callback) {
  this.send_SalesRanking(node_id, category, page, callback); 
  if (!callback) {
    return this.recv_SalesRanking();
  }
};

Fuji.Item.ItemServiceClient.prototype.send_SalesRanking = function(node_id, category, page, callback) {
  this.output.writeMessageBegin('SalesRanking', Thrift.MessageType.CALL, this.seqid);
  var params = {
    node_id: node_id,
    category: category,
    page: page
  };
  var args = new Fuji.Item.ItemService_SalesRanking_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_SalesRanking();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

Fuji.Item.ItemServiceClient.prototype.recv_SalesRanking = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Fuji.Item.ItemService_SalesRanking_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'SalesRanking failed: unknown result';
};
Fuji.Item.ItemServiceClient.prototype.ItemLookup = function(item_id, id_type, callback) {
  this.send_ItemLookup(item_id, id_type, callback); 
  if (!callback) {
    return this.recv_ItemLookup();
  }
};

Fuji.Item.ItemServiceClient.prototype.send_ItemLookup = function(item_id, id_type, callback) {
  this.output.writeMessageBegin('ItemLookup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    item_id: item_id,
    id_type: id_type
  };
  var args = new Fuji.Item.ItemService_ItemLookup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_ItemLookup();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

Fuji.Item.ItemServiceClient.prototype.recv_ItemLookup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Fuji.Item.ItemService_ItemLookup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ItemLookup failed: unknown result';
};
Fuji.Item.ItemServiceClient.prototype.ItemList = function(keyword, page, callback) {
  this.send_ItemList(keyword, page, callback); 
  if (!callback) {
    return this.recv_ItemList();
  }
};

Fuji.Item.ItemServiceClient.prototype.send_ItemList = function(keyword, page, callback) {
  this.output.writeMessageBegin('ItemList', Thrift.MessageType.CALL, this.seqid);
  var params = {
    keyword: keyword,
    page: page
  };
  var args = new Fuji.Item.ItemService_ItemList_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_ItemList();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

Fuji.Item.ItemServiceClient.prototype.recv_ItemList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Fuji.Item.ItemService_ItemList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ItemList failed: unknown result';
};
Fuji.Item.ItemServiceClient.prototype.NodeList = function(node_id, callback) {
  this.send_NodeList(node_id, callback); 
  if (!callback) {
    return this.recv_NodeList();
  }
};

Fuji.Item.ItemServiceClient.prototype.send_NodeList = function(node_id, callback) {
  this.output.writeMessageBegin('NodeList', Thrift.MessageType.CALL, this.seqid);
  var params = {
    node_id: node_id
  };
  var args = new Fuji.Item.ItemService_NodeList_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_NodeList();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

Fuji.Item.ItemServiceClient.prototype.recv_NodeList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Fuji.Item.ItemService_NodeList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'NodeList failed: unknown result';
};
