// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ItemService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class ItemServiceHandler : virtual public ItemServiceIf {
 public:
  ItemServiceHandler() {
    // Your initialization goes here
  }

  void NewReleases(std::vector<Tops> & _return, const int64_t node_id) {
    // Your implementation goes here
    printf("NewReleases\n");
  }

  void BestSellers(std::vector<Tops> & _return, const int64_t node_id) {
    // Your implementation goes here
    printf("BestSellers\n");
  }

  void ReleaseDate(std::vector<Item> & _return, const int64_t node_id, const std::string& category, const int64_t page) {
    // Your implementation goes here
    printf("ReleaseDate\n");
  }

  void SalesRanking(std::vector<Item> & _return, const int64_t node_id, const std::string& category, const int64_t page) {
    // Your implementation goes here
    printf("SalesRanking\n");
  }

  void ItemLookup(std::vector<Item> & _return, const std::string& item_id, const std::string& id_type) {
    // Your implementation goes here
    printf("ItemLookup\n");
  }

  void ItemList(std::vector<Item> & _return, const std::string& keyword, const int64_t page) {
    // Your implementation goes here
    printf("ItemList\n");
  }

  void NodeList(std::vector<Node> & _return, const int64_t node_id) {
    // Your implementation goes here
    printf("NodeList\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<ItemServiceHandler> handler(new ItemServiceHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new ItemServiceProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

