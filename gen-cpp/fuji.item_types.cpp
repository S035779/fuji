/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "fuji.item_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




Item::~Item() throw() {
}


void Item::__set_Rank(const int64_t val) {
  this->Rank = val;
}

void Item::__set_ASIN(const std::string& val) {
  this->ASIN = val;
}

void Item::__set_Title(const std::string& val) {
  this->Title = val;
}

void Item::__set_Release(const std::string& val) {
  this->Release = val;
}

void Item::__set_ItemUrl(const std::string& val) {
  this->ItemUrl = val;
}

void Item::__set_ImageUrl(const std::string& val) {
  this->ImageUrl = val;
}

void Item::__set_ListPrice(const int64_t val) {
  this->ListPrice = val;
}

void Item::__set_LowestNewPrice(const int64_t val) {
  this->LowestNewPrice = val;
}

void Item::__set_LowestUsedPrice(const int64_t val) {
  this->LowestUsedPrice = val;
}

void Item::__set_OfferPrice(const int64_t val) {
  this->OfferPrice = val;
}

uint32_t Item::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Rank);
          this->__isset.Rank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ASIN);
          this->__isset.ASIN = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Title);
          this->__isset.Title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Release);
          this->__isset.Release = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ItemUrl);
          this->__isset.ItemUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ImageUrl);
          this->__isset.ImageUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ListPrice);
          this->__isset.ListPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->LowestNewPrice);
          this->__isset.LowestNewPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->LowestUsedPrice);
          this->__isset.LowestUsedPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->OfferPrice);
          this->__isset.OfferPrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Item::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Item");

  xfer += oprot->writeFieldBegin("Rank", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->Rank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ASIN", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ASIN);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Title", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Release", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Release);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ItemUrl", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ItemUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ImageUrl", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->ImageUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ListPrice", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->ListPrice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LowestNewPrice", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->LowestNewPrice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LowestUsedPrice", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->LowestUsedPrice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("OfferPrice", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->OfferPrice);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Item &a, Item &b) {
  using ::std::swap;
  swap(a.Rank, b.Rank);
  swap(a.ASIN, b.ASIN);
  swap(a.Title, b.Title);
  swap(a.Release, b.Release);
  swap(a.ItemUrl, b.ItemUrl);
  swap(a.ImageUrl, b.ImageUrl);
  swap(a.ListPrice, b.ListPrice);
  swap(a.LowestNewPrice, b.LowestNewPrice);
  swap(a.LowestUsedPrice, b.LowestUsedPrice);
  swap(a.OfferPrice, b.OfferPrice);
  swap(a.__isset, b.__isset);
}

Item::Item(const Item& other0) {
  Rank = other0.Rank;
  ASIN = other0.ASIN;
  Title = other0.Title;
  Release = other0.Release;
  ItemUrl = other0.ItemUrl;
  ImageUrl = other0.ImageUrl;
  ListPrice = other0.ListPrice;
  LowestNewPrice = other0.LowestNewPrice;
  LowestUsedPrice = other0.LowestUsedPrice;
  OfferPrice = other0.OfferPrice;
  __isset = other0.__isset;
}
Item& Item::operator=(const Item& other1) {
  Rank = other1.Rank;
  ASIN = other1.ASIN;
  Title = other1.Title;
  Release = other1.Release;
  ItemUrl = other1.ItemUrl;
  ImageUrl = other1.ImageUrl;
  ListPrice = other1.ListPrice;
  LowestNewPrice = other1.LowestNewPrice;
  LowestUsedPrice = other1.LowestUsedPrice;
  OfferPrice = other1.OfferPrice;
  __isset = other1.__isset;
  return *this;
}
void Item::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Item(";
  out << "Rank=" << to_string(Rank);
  out << ", " << "ASIN=" << to_string(ASIN);
  out << ", " << "Title=" << to_string(Title);
  out << ", " << "Release=" << to_string(Release);
  out << ", " << "ItemUrl=" << to_string(ItemUrl);
  out << ", " << "ImageUrl=" << to_string(ImageUrl);
  out << ", " << "ListPrice=" << to_string(ListPrice);
  out << ", " << "LowestNewPrice=" << to_string(LowestNewPrice);
  out << ", " << "LowestUsedPrice=" << to_string(LowestUsedPrice);
  out << ", " << "OfferPrice=" << to_string(OfferPrice);
  out << ")";
}


Tops::~Tops() throw() {
}


void Tops::__set_ASIN(const std::string& val) {
  this->ASIN = val;
}

void Tops::__set_Title(const std::string& val) {
  this->Title = val;
}

void Tops::__set_ItemUrl(const std::string& val) {
  this->ItemUrl = val;
}

void Tops::__set_Category(const std::string& val) {
  this->Category = val;
}

uint32_t Tops::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ASIN);
          this->__isset.ASIN = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Title);
          this->__isset.Title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ItemUrl);
          this->__isset.ItemUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Category);
          this->__isset.Category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tops::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Tops");

  xfer += oprot->writeFieldBegin("ASIN", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ASIN);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ItemUrl", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->ItemUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Category", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tops &a, Tops &b) {
  using ::std::swap;
  swap(a.ASIN, b.ASIN);
  swap(a.Title, b.Title);
  swap(a.ItemUrl, b.ItemUrl);
  swap(a.Category, b.Category);
  swap(a.__isset, b.__isset);
}

Tops::Tops(const Tops& other2) {
  ASIN = other2.ASIN;
  Title = other2.Title;
  ItemUrl = other2.ItemUrl;
  Category = other2.Category;
  __isset = other2.__isset;
}
Tops& Tops::operator=(const Tops& other3) {
  ASIN = other3.ASIN;
  Title = other3.Title;
  ItemUrl = other3.ItemUrl;
  Category = other3.Category;
  __isset = other3.__isset;
  return *this;
}
void Tops::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Tops(";
  out << "ASIN=" << to_string(ASIN);
  out << ", " << "Title=" << to_string(Title);
  out << ", " << "ItemUrl=" << to_string(ItemUrl);
  out << ", " << "Category=" << to_string(Category);
  out << ")";
}


Node::~Node() throw() {
}


void Node::__set_BrowseNode(const int64_t val) {
  this->BrowseNode = val;
}

void Node::__set_Name(const std::string& val) {
  this->Name = val;
}

uint32_t Node::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->BrowseNode);
          this->__isset.BrowseNode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Node::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Node");

  xfer += oprot->writeFieldBegin("BrowseNode", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->BrowseNode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Node &a, Node &b) {
  using ::std::swap;
  swap(a.BrowseNode, b.BrowseNode);
  swap(a.Name, b.Name);
  swap(a.__isset, b.__isset);
}

Node::Node(const Node& other4) {
  BrowseNode = other4.BrowseNode;
  Name = other4.Name;
  __isset = other4.__isset;
}
Node& Node::operator=(const Node& other5) {
  BrowseNode = other5.BrowseNode;
  Name = other5.Name;
  __isset = other5.__isset;
  return *this;
}
void Node::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Node(";
  out << "BrowseNode=" << to_string(BrowseNode);
  out << ", " << "Name=" << to_string(Name);
  out << ")";
}


