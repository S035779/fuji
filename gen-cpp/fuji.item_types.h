/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef fuji.item_TYPES_H
#define fuji.item_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




class Item;

class Tops;

class Node;

typedef struct _Item__isset {
  _Item__isset() : Rank(false), ASIN(false), Title(false), Release(false), ItemUrl(false), ImageUrl(false), ListPrice(false), LowestNewPrice(false), LowestUsedPrice(false), OfferPrice(false) {}
  bool Rank :1;
  bool ASIN :1;
  bool Title :1;
  bool Release :1;
  bool ItemUrl :1;
  bool ImageUrl :1;
  bool ListPrice :1;
  bool LowestNewPrice :1;
  bool LowestUsedPrice :1;
  bool OfferPrice :1;
} _Item__isset;

class Item : public virtual ::apache::thrift::TBase {
 public:

  Item(const Item&);
  Item& operator=(const Item&);
  Item() : Rank(0), ASIN(), Title(), Release(), ItemUrl(), ImageUrl(), ListPrice(0), LowestNewPrice(0), LowestUsedPrice(0), OfferPrice(0) {
  }

  virtual ~Item() throw();
  int64_t Rank;
  std::string ASIN;
  std::string Title;
  std::string Release;
  std::string ItemUrl;
  std::string ImageUrl;
  int64_t ListPrice;
  int64_t LowestNewPrice;
  int64_t LowestUsedPrice;
  int64_t OfferPrice;

  _Item__isset __isset;

  void __set_Rank(const int64_t val);

  void __set_ASIN(const std::string& val);

  void __set_Title(const std::string& val);

  void __set_Release(const std::string& val);

  void __set_ItemUrl(const std::string& val);

  void __set_ImageUrl(const std::string& val);

  void __set_ListPrice(const int64_t val);

  void __set_LowestNewPrice(const int64_t val);

  void __set_LowestUsedPrice(const int64_t val);

  void __set_OfferPrice(const int64_t val);

  bool operator == (const Item & rhs) const
  {
    if (!(Rank == rhs.Rank))
      return false;
    if (!(ASIN == rhs.ASIN))
      return false;
    if (!(Title == rhs.Title))
      return false;
    if (!(Release == rhs.Release))
      return false;
    if (!(ItemUrl == rhs.ItemUrl))
      return false;
    if (!(ImageUrl == rhs.ImageUrl))
      return false;
    if (!(ListPrice == rhs.ListPrice))
      return false;
    if (!(LowestNewPrice == rhs.LowestNewPrice))
      return false;
    if (!(LowestUsedPrice == rhs.LowestUsedPrice))
      return false;
    if (!(OfferPrice == rhs.OfferPrice))
      return false;
    return true;
  }
  bool operator != (const Item &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Item & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Item &a, Item &b);

std::ostream& operator<<(std::ostream& out, const Item& obj);

typedef struct _Tops__isset {
  _Tops__isset() : ASIN(false), Title(false), ItemUrl(false), Category(false) {}
  bool ASIN :1;
  bool Title :1;
  bool ItemUrl :1;
  bool Category :1;
} _Tops__isset;

class Tops : public virtual ::apache::thrift::TBase {
 public:

  Tops(const Tops&);
  Tops& operator=(const Tops&);
  Tops() : ASIN(), Title(), ItemUrl(), Category() {
  }

  virtual ~Tops() throw();
  std::string ASIN;
  std::string Title;
  std::string ItemUrl;
  std::string Category;

  _Tops__isset __isset;

  void __set_ASIN(const std::string& val);

  void __set_Title(const std::string& val);

  void __set_ItemUrl(const std::string& val);

  void __set_Category(const std::string& val);

  bool operator == (const Tops & rhs) const
  {
    if (!(ASIN == rhs.ASIN))
      return false;
    if (!(Title == rhs.Title))
      return false;
    if (!(ItemUrl == rhs.ItemUrl))
      return false;
    if (!(Category == rhs.Category))
      return false;
    return true;
  }
  bool operator != (const Tops &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tops & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Tops &a, Tops &b);

std::ostream& operator<<(std::ostream& out, const Tops& obj);

typedef struct _Node__isset {
  _Node__isset() : BrowseNode(false), Name(false) {}
  bool BrowseNode :1;
  bool Name :1;
} _Node__isset;

class Node : public virtual ::apache::thrift::TBase {
 public:

  Node(const Node&);
  Node& operator=(const Node&);
  Node() : BrowseNode(0), Name() {
  }

  virtual ~Node() throw();
  int64_t BrowseNode;
  std::string Name;

  _Node__isset __isset;

  void __set_BrowseNode(const int64_t val);

  void __set_Name(const std::string& val);

  bool operator == (const Node & rhs) const
  {
    if (!(BrowseNode == rhs.BrowseNode))
      return false;
    if (!(Name == rhs.Name))
      return false;
    return true;
  }
  bool operator != (const Node &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Node & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Node &a, Node &b);

std::ostream& operator<<(std::ostream& out, const Node& obj);



#endif
