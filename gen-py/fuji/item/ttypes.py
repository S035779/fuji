#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Item(object):
    """
    Attributes:
     - Rank
     - ASIN
     - Title
     - Release
     - ItemUrl
     - ImageUrl
     - ListPrice
     - LowestNewPrice
     - LowestUsedPrice
     - OfferPrice
    """


    def __init__(self, Rank=None, ASIN=None, Title=None, Release=None, ItemUrl=None, ImageUrl=None, ListPrice=None, LowestNewPrice=None, LowestUsedPrice=None, OfferPrice=None,):
        self.Rank = Rank
        self.ASIN = ASIN
        self.Title = Title
        self.Release = Release
        self.ItemUrl = ItemUrl
        self.ImageUrl = ImageUrl
        self.ListPrice = ListPrice
        self.LowestNewPrice = LowestNewPrice
        self.LowestUsedPrice = LowestUsedPrice
        self.OfferPrice = OfferPrice

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.Rank = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ASIN = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.Title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.Release = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ItemUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.ImageUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.ListPrice = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.LowestNewPrice = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.LowestUsedPrice = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.OfferPrice = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Item')
        if self.Rank is not None:
            oprot.writeFieldBegin('Rank', TType.I64, 1)
            oprot.writeI64(self.Rank)
            oprot.writeFieldEnd()
        if self.ASIN is not None:
            oprot.writeFieldBegin('ASIN', TType.STRING, 2)
            oprot.writeString(self.ASIN.encode('utf-8') if sys.version_info[0] == 2 else self.ASIN)
            oprot.writeFieldEnd()
        if self.Title is not None:
            oprot.writeFieldBegin('Title', TType.STRING, 3)
            oprot.writeString(self.Title.encode('utf-8') if sys.version_info[0] == 2 else self.Title)
            oprot.writeFieldEnd()
        if self.Release is not None:
            oprot.writeFieldBegin('Release', TType.STRING, 4)
            oprot.writeString(self.Release.encode('utf-8') if sys.version_info[0] == 2 else self.Release)
            oprot.writeFieldEnd()
        if self.ItemUrl is not None:
            oprot.writeFieldBegin('ItemUrl', TType.STRING, 5)
            oprot.writeString(self.ItemUrl.encode('utf-8') if sys.version_info[0] == 2 else self.ItemUrl)
            oprot.writeFieldEnd()
        if self.ImageUrl is not None:
            oprot.writeFieldBegin('ImageUrl', TType.STRING, 6)
            oprot.writeString(self.ImageUrl.encode('utf-8') if sys.version_info[0] == 2 else self.ImageUrl)
            oprot.writeFieldEnd()
        if self.ListPrice is not None:
            oprot.writeFieldBegin('ListPrice', TType.I64, 7)
            oprot.writeI64(self.ListPrice)
            oprot.writeFieldEnd()
        if self.LowestNewPrice is not None:
            oprot.writeFieldBegin('LowestNewPrice', TType.I64, 8)
            oprot.writeI64(self.LowestNewPrice)
            oprot.writeFieldEnd()
        if self.LowestUsedPrice is not None:
            oprot.writeFieldBegin('LowestUsedPrice', TType.I64, 9)
            oprot.writeI64(self.LowestUsedPrice)
            oprot.writeFieldEnd()
        if self.OfferPrice is not None:
            oprot.writeFieldBegin('OfferPrice', TType.I64, 10)
            oprot.writeI64(self.OfferPrice)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Tops(object):
    """
    Attributes:
     - ASIN
     - Title
     - ItemUrl
     - Category
    """


    def __init__(self, ASIN=None, Title=None, ItemUrl=None, Category=None,):
        self.ASIN = ASIN
        self.Title = Title
        self.ItemUrl = ItemUrl
        self.Category = Category

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ASIN = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ItemUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.Category = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Tops')
        if self.ASIN is not None:
            oprot.writeFieldBegin('ASIN', TType.STRING, 1)
            oprot.writeString(self.ASIN.encode('utf-8') if sys.version_info[0] == 2 else self.ASIN)
            oprot.writeFieldEnd()
        if self.Title is not None:
            oprot.writeFieldBegin('Title', TType.STRING, 2)
            oprot.writeString(self.Title.encode('utf-8') if sys.version_info[0] == 2 else self.Title)
            oprot.writeFieldEnd()
        if self.ItemUrl is not None:
            oprot.writeFieldBegin('ItemUrl', TType.STRING, 3)
            oprot.writeString(self.ItemUrl.encode('utf-8') if sys.version_info[0] == 2 else self.ItemUrl)
            oprot.writeFieldEnd()
        if self.Category is not None:
            oprot.writeFieldBegin('Category', TType.STRING, 4)
            oprot.writeString(self.Category.encode('utf-8') if sys.version_info[0] == 2 else self.Category)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Node(object):
    """
    Attributes:
     - BrowseNode
     - Name
    """


    def __init__(self, BrowseNode=None, Name=None,):
        self.BrowseNode = BrowseNode
        self.Name = Name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.BrowseNode = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.Name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Node')
        if self.BrowseNode is not None:
            oprot.writeFieldBegin('BrowseNode', TType.I64, 1)
            oprot.writeI64(self.BrowseNode)
            oprot.writeFieldEnd()
        if self.Name is not None:
            oprot.writeFieldBegin('Name', TType.STRING, 2)
            oprot.writeString(self.Name.encode('utf-8') if sys.version_info[0] == 2 else self.Name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Item)
Item.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'Rank', None, None, ),  # 1
    (2, TType.STRING, 'ASIN', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'Title', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'Release', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'ItemUrl', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'ImageUrl', 'UTF8', None, ),  # 6
    (7, TType.I64, 'ListPrice', None, None, ),  # 7
    (8, TType.I64, 'LowestNewPrice', None, None, ),  # 8
    (9, TType.I64, 'LowestUsedPrice', None, None, ),  # 9
    (10, TType.I64, 'OfferPrice', None, None, ),  # 10
)
all_structs.append(Tops)
Tops.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ASIN', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'Title', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ItemUrl', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'Category', 'UTF8', None, ),  # 4
)
all_structs.append(Node)
Node.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'BrowseNode', None, None, ),  # 1
    (2, TType.STRING, 'Name', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
